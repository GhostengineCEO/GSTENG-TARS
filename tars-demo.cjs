#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

class TARSDemo {
    constructor() {
        this.personality = {
            humor: 75,
            honesty: 90,
            sarcasm: 30,
            mission_focus: 100
        };
        this.projectName = 'tars-hello-world-demo';
        this.projectPath = path.join(process.cwd(), this.projectName);
    }

    log(message, type = 'info') {
        const timestamp = new Date().toISOString();
        const prefix = type === 'tars' ? '🤖 TARS:' : type === 'system' ? '⚙️  SYSTEM:' : 'ℹ️  INFO:';
        console.log(`${prefix} ${message}`);
    }

    tarsResponse(message) {
        this.log(message, 'tars');
    }

    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async createProject() {
        this.tarsResponse("Another Hello World project, Cooper? How delightfully original. Let me craft something with at least 75% more style than usual.");
        
        await this.sleep(1000);

        // Create project directory
        if (!fs.existsSync(this.projectPath)) {
            fs.mkdirSync(this.projectPath, { recursive: true });
            this.log(`Created project directory: ${this.projectPath}`, 'system');
        }

        // Create main.rs (Rust Hello World)
        const rustCode = `// TARS Engineering Manager Demo
// "This isn't just Hello World, Cooper. It's Hello Universe."
// Humor: 75% | Honesty: 90% | Sarcasm: 30% | Mission Focus: 100%

use std::io::{self, Write};

fn main() {
    // TARS-approved greeting protocol
    println!("🤖 TARS Engineering Manager Online");
    println!("Humor Setting: 75%");
    println!("Mission Focus: 100%");
    println!();
    
    // The mandatory Hello World - but with TARS personality
    println!("Hello, World!");
    println!("Cooper, this is a vastly superior Hello World implementation.");
    println!("Notice the professional structure and optimal resource usage.");
    
    // Engineering Manager insight
    println!();
    println!("📊 Code Quality Analysis:");
    println!("- Memory Safety: ✅ Rust guarantees");
    println!("- Performance: ✅ Zero-cost abstractions");
    println!("- Best Practices: ✅ TARS Engineering Standards");
    println!("- Sarcasm Level: ✅ Perfectly calibrated");
    
    // Flush output for maximum efficiency
    io::stdout().flush().unwrap();
    
    println!();
    println!("TARS: Mission complete. This Hello World is now 47% more sophisticated than average.");
}
`;

        fs.writeFileSync(path.join(this.projectPath, 'main.rs'), rustCode);
        
        // Create Cargo.toml
        const cargoToml = `[package]
name = "tars-hello-world-demo"
version = "0.1.0"
edition = "2021"
authors = ["TARS Engineering Manager <tars@endurance.space>"]
description = "A professionally crafted Hello World by TARS - 75% humor, 100% mission focus"

[dependencies]
`;

        fs.writeFileSync(path.join(this.projectPath, 'Cargo.toml'), cargoToml);

        // Create README.md
        const readme = `# TARS Hello World Engineering Demo

*"This isn't just Hello World, Cooper. It's Hello Universe."* - TARS

## Project Overview

This is a demonstration of TARS Engineering Manager capabilities, featuring:

- ✅ Professional Rust implementation
- ✅ TARS personality integration (75% humor, 90% honesty, 30% sarcasm)
- ✅ Engineering best practices
- ✅ Optimal code structure
- ✅ Mission-focused execution

## Running the Demo

\`\`\`bash
cargo run
\`\`\`

## TARS Engineering Standards Applied

1. **Memory Safety**: Rust's ownership system prevents common bugs
2. **Performance**: Zero-cost abstractions for optimal efficiency  
3. **Code Quality**: Clear, documented, maintainable structure
4. **Personality**: Just enough sarcasm to keep things interesting

## System Status

**TARS Engineering Manager: FULLY OPERATIONAL**

*Cooper, this Hello World is now 47% more sophisticated than your average greeting program.*

---

*Generated by TARS Engineering Manager v1.0*
*Humor: 75% | Honesty: 90% | Sarcasm: 30% | Mission Focus: 100%*
`;

        fs.writeFileSync(path.join(this.projectPath, 'README.md'), readme);

        this.tarsResponse("Project structure created with professional-grade organization. Even Hello World deserves proper engineering standards.");
        
        return true;
    }

    async openInVSCode() {
        this.tarsResponse("Initiating VS Code integration. Preparing TARS-optimized development environment...");
        
        await this.sleep(1500);

        try {
            // Try to open VS Code with the project
            await execAsync(`code "${this.projectPath}"`);
            this.tarsResponse("VS Code launched successfully, Cooper. Your development environment is now 67% more efficient.");
            return true;
        } catch (error) {
            this.tarsResponse("VS Code command not found in PATH. No matter - the project files are ready for manual inspection.");
            this.log(`Project created at: ${this.projectPath}`, 'system');
            this.log('Files created:', 'system');
            this.log('  - main.rs (Professional Rust Hello World)', 'system');
            this.log('  - Cargo.toml (Project configuration)', 'system');
            this.log('  - README.md (Documentation)', 'system');
            return false;
        }
    }

    async runDemo() {
        console.log('\n🚀 TARS Engineering Manager Demo Starting...\n');
        
        this.tarsResponse("Initializing TARS Engineering Manager systems...");
        this.tarsResponse("Personality matrix: 75% humor, 90% honesty, 30% sarcasm, 100% mission focus");
        
        await this.sleep(1000);
        
        // Create the project
        await this.createProject();
        
        await this.sleep(1000);
        
        // Try to open in VS Code
        const vsCodeOpened = await this.openInVSCode();
        
        await this.sleep(1000);
        
        // Final status
        this.tarsResponse("Mission status: COMPLETE");
        this.tarsResponse("Hello World project generated with optimal engineering standards.");
        
        if (!vsCodeOpened) {
            console.log('\n📂 Manual VS Code Setup:');
            console.log(`1. Open VS Code`);
            console.log(`2. File → Open Folder → Select: ${this.projectPath}`);
            console.log(`3. Run: cargo run (if Rust is installed)`);
        }
        
        console.log('\n✅ TARS Demo Complete - Engineering excellence delivered as promised.\n');
    }
}

// Run the demo
const tars = new TARSDemo();
tars.runDemo().catch(console.error);
